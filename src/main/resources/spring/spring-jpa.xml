<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
		  http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
       	  http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <description>SpringJpa配置</description>
    <context:property-placeholder location="classpath:props/*.properties" />


    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${connection.url}" />
        <property name="username" value="${connection.username}" />
        <property name="password" value="${connection.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <property name="minIdle" value="${druid.minIdle}" />
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- Druid内置提供一个StatFilter，用于统计监控信息 -->
       <!-- <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
                <ref bean="log-filter" />
            </list> 
        </property> -->
    </bean>
    <!-- druid慢SQL记录 -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="mergeSql" value="${druid.mergeSql}" />
        <property name="slowSqlMillis" value="${druid.slowSqlMillis}" />
        <property name="logSlowSql" value="${druid.logSlowSql}" />
    </bean>

    <!-- druid日志记录 -->
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter"/>

    <!-- Spring Data Jpa配置 -->
    <bean id="ehcacheEntityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan" value="cn.com.enersun.**.entity" />
        <property name="persistenceUnitName" value="nx-jpa" /> 
        <property name="persistenceProvider">
            <bean class="org.hibernate.ejb.HibernatePersistence" />
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="${jpa.generateDdl}" />
                <!--<property name="database" value="${jpa.database}" />-->
                <property name="databasePlatform" value="${jpa.databasePlatform}" />
                <property name="showSql" value="${jpa.showSql}" />
            </bean>
        </property>
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
        </property>
        <property name="jpaPropertyMap">
            <map>
                <entry key="hibernate.archive.autodetection" value="class"/>
                <entry key="hibernate.query.startup_check" value="false"/>
                <entry key="hibernate.query.substitutions" value="${hibernate.query.substitutions}"/>
                <entry key="hibernate.default_batch_fetch_size" value="${hibernate.default_batch_fetch_size}"/>
                <entry key="hibernate.max_fetch_depth" value="${hibernate.max_fetch_depth}"/>
                <entry key="hibernate.generate_statistics" value="${hibernate.generate_statistics}"/>
                <entry key="hibernate.bytecode.use_reflection_optimizer" value="${hibernate.bytecode.use_reflection_optimizer}"/>
                <entry key="hibernate.cache.use_second_level_cache" value="${hibernate.cache.use_second_level_cache}"/>
                <entry key="hibernate.cache.use_query_cache" value="${hibernate.cache.use_query_cache}"/>
                <entry key="hibernate.cache.region.factory_class" value="org.hibernate.cache.ehcache.EhCacheRegionFactory"/>
                <entry key="net.sf.ehcache.configurationResourceName" value="spring/ehcache/ehcache_hibernate.xml"/>
                <entry key="hibernate.cache.use_structured_entries" value="${hibernate.cache.use_structured_entries}"/>
                <entry key="hibernate.hbm2ddl.auto" value="${hibernate.hbm2ddl.auto}" />
            </map>
        </property>
    </bean>
         <!-- 配置Spring Data JPA扫描目录--> 
    <!-- 重要配置：启用扫描并自动创建代理的功能  -->
    <jpa:repositories base-package="cn.com.enersun.data_center.bigdata_service"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="ehcacheEntityManagerFactory"/>
     
    <!--事务管理器配置 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="ehcacheEntityManagerFactory" />
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    <aop:config expose-proxy="true" proxy-target-class="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* cn.com.enersun.**.service..*+.*(..))" ></aop:pointcut>
        <aop:advisor id="txAdvisor" advice-ref="txAdvice" pointcut-ref="txPointcut" />
    </aop:config>
 
    <!--设置BaseRepositoryImplHelper辅助类所需的entityManagerFactory-->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="cn.com.enersun.nx.entity.jpa.BaseDao.setEntityManagerFactory"/>
        <property name="arguments" ref="ehcacheEntityManagerFactory"/>
    </bean>
    
      	  <!-- 创建SqlSessionFactory，同时指定数据源 -->  
   <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" /> 
        <property name="configLocation" value="classpath:mybatis/mybatis-conf.xml" /> 
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
       <property name="mapperLocations" value="classpath*:cn/com/enersun/data_center/bigdata_service/mapper/*.xml" /> 
    </bean>  
    <!-- DAO接口所在包名，Spring会自动查找其下的类, 扫描mybatis映射接口类 --> 
    <bean id="mybatisConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="cn.com.enersun.data_center.bigdata_service.dao" />
        <property name="sqlSessionFactoryBeanName" value="SqlSessionFactory" />
    </bean>
      
    <!-- 使用annotation 自动注册bean, 并保证@component,@service,@Repository,@Required,@Autowired的属性被注入   -->
   <context:component-scan base-package="cn.com.enersun.data_center.bigdata_service.dao">
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
     </context:component-scan>
  
    <!-- 可通过注解控制事务 -->  
    <!--开启spring的注解支持-->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
</beans>